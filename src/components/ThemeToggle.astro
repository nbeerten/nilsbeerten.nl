---
import Sun from "~icons/heroicons/sun-16-solid";
import Moon from "~icons/heroicons/moon-16-solid";
---

<div
    id="themeToggle"
    class="theme-toggle swipe-area"
    role="radiogroup"
    aria-label="Theme toggle"
    aria-labelledby="themeToggleLabel">
    <span id="themeToggleLabel" class="sr-only">Choose your color-scheme preference:</span>
    <input id="light" type="radio" name="theme" value="light" aria-labelledby="lightThemeLabel" />
    <label for="light" id="lightThemeLabel" aria-label="Light theme" tabindex="0">
        <span class="sr-only">Light theme</span>
        <Sun />
    </label>
    <input id="auto" type="radio" name="theme" value="auto" aria-labelledby="autoThemeLabel" />
    <label for="auto" id="autoThemeLabel" aria-label="Automatic theme switching" tabindex="0">
        <span class="sr-only">Automatic theme switching</span>
        A
    </label>
    <input id="dark" type="radio" name="theme" value="dark" aria-labelledby="darkThemeLabel" />
    <label for="dark" id="darkThemeLabel" aria-label="Dark theme" tabindex="0">
        <span class="sr-only">Dark theme</span>
        <Moon />
    </label>
    <span></span>
</div>

<script>
    document.querySelectorAll(".theme-toggle > label").forEach((_label) => {
        let label = _label as HTMLLabelElement;
        label.addEventListener("keydown", (event) => {
            if (event.key === " ") {
                event.preventDefault();
                let forAttr: string | null;
                if ((forAttr = label.getAttribute("for"))) {
                    const input = document.getElementById(forAttr) as HTMLInputElement;
                    input.checked = true;
                }
            }
        });
    });
</script>

<script>
    declare global {
        interface Window {
            setColorScheme: (scheme: "light" | "dark" | "auto") => void;
        }
    }

    import TouchSweep from "touchsweep";

    const sortedSchemes = ["light", "auto", "dark"] as const;

    function initializeSwipeArea(document: Document) {
        if (!window.matchMedia("(pointer: coarse)").matches) return;

        const area = document.querySelector(".swipe-area") as HTMLElement;
        const data = {
            value: 1,
        };
        const touchThreshold = 20;

        new TouchSweep(area, data, touchThreshold);

        const [lightInput, autoInput, darkInput] = Array.from(
            document.querySelectorAll("#themeToggle > input")
        ) as HTMLInputElement[];
        const getCurrentColorScheme = () => {
            let currentColorScheme: string | null = null;
            document.querySelectorAll("#themeToggle > input").forEach((input) => {
                if ((input as HTMLInputElement).checked) {
                    currentColorScheme = (input as HTMLInputElement).value;
                } else {
                    return;
                }
            });

            return currentColorScheme;
        };

        area.addEventListener("swipeleft", () => {
            const currentColorScheme =
                getCurrentColorScheme() as unknown as (typeof sortedSchemes)[number];
            const index = sortedSchemes.indexOf(currentColorScheme);
            const prevIndex = index - 1;
            const nextColorScheme = sortedSchemes[prevIndex] || sortedSchemes[0];

            if (nextColorScheme === "auto" && autoInput) {
                autoInput.click();
            } else if (nextColorScheme === "light" && lightInput) {
                lightInput.click();
            } else if (nextColorScheme === "dark" && darkInput) {
                darkInput.click();
            }
        });

        area.addEventListener("swiperight", () => {
            const currentColorScheme =
                getCurrentColorScheme() as unknown as (typeof sortedSchemes)[number];
            const index = sortedSchemes.indexOf(currentColorScheme);
            const nextIndex = index + 1;
            const nextColorScheme = sortedSchemes[nextIndex] || sortedSchemes.at(-1);

            if (nextColorScheme === "auto" && autoInput) {
                autoInput.click();
            } else if (nextColorScheme === "light" && lightInput) {
                lightInput.click();
            } else if (nextColorScheme === "dark" && darkInput) {
                darkInput.click();
            }
        });

        area.addEventListener("touchmove", (e) => {
            e.preventDefault();
        });
    }

    initializeSwipeArea(document);

    document.addEventListener("astro:after-swap", () => initializeSwipeArea(document));
</script>

<style>
    .theme-toggle {
        --base-size: 1.3rem;
        --icon-size: 0.9rem;
        --gap-size: 0.125rem;
        --padding-left: 0.5rem;

        padding: 0.25rem 0.25rem 0.25rem var(--padding-left);

        display: grid;
        grid-template-columns: repeat(3, var(--base-size));
        grid-template-rows: var(--base-size);
        align-items: center;
        justify-content: center;
        position: relative;
        gap: var(--gap-size);
        border-radius: 0 9999px 9999px 0;

        label {
            position: relative;
            width: var(--base-size);
            height: var(--base-size);
            border-radius: 50%;
            z-index: 2;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            user-select: none;
            font-size: var(--icon-size);

            svg {
                width: var(--icon-size);
                height: var(--icon-size);
            }
        }

        input {
            display: none;
        }

        span {
            height: var(--base-size);
            width: var(--base-size);
            border-radius: 50%;
            background-color: currentColor;
            display: block;
            position: absolute;

            transition: left 0.3s ease-in-out;
            /* @media (prefers-reduced-motion) {
                transition: none;
            } */
        }

        input:checked + label {
            color: var(--brand-background) !important;
        }
        input[value="light"]:checked ~ span {
            left: var(--padding-left);
        }
        input[value="auto"]:checked ~ span {
            left: calc(var(--padding-left) + var(--base-size) + var(--gap-size));
        }
        input[value="dark"]:checked ~ span {
            left: calc(var(--padding-left) + var(--base-size) * 2 + var(--gap-size) * 2);
        }
    }
</style>
