---
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import HeadingGroup from "@components/HeadingGroup.astro";
import { createLocale } from "@lib/i18n";
import Languages from "~icons/heroicons/language-16-solid";

export async function getStaticPaths() {
    const posts = (await getCollection("blog")).filter((blog) => !blog.data.draft);

    return posts.map((post) => ({
        params: { id: post.id },
        props: { post },
    }));
}

export const prerender = true;

type Props = {
    post: CollectionEntry<"blog">;
};

const { post } = Astro.props;

const { Content, remarkPluginFrontmatter } = await render(post);

const { locale, str } = createLocale(Astro.url);

const formatTime = (time: number) => {
    const minutes = Math.round(time);
    return `${minutes} ${str("min read", "minuten leestijd")}`;
};
---

<Layout
    title={post.data.title}
    back="/blog"
    lang={locale}
    article={post.data}
    noindex={locale !== post.data.language}
    breadcrumbs={[["Blog", "/blog"], [post.data.title]]}>
    <article lang={post.data.language}>
        <HeadingGroup title={post.data.title}>
            <header
                slot="subtitle"
                class="text-brand-muted inline-flex items-center gap-1"
                role="contentinfo"
                aria-label="Article metadata">
                <Languages class="-mb-0.5 h-4 w-4" />
                {post.data.language}
                <span>-</span>
                {post.data.date.toLocaleDateString(`${locale}-NL`)}
                <span>-</span>
                {formatTime(remarkPluginFrontmatter.readingTime)}
            </header>
        </HeadingGroup>
        <hr class="border-brand-hr my-5" />
        <div class="prose_img prose prose-amber">
            <Content />
        </div>
    </article>
</Layout>

<style>
    @reference "src/styles/global.css";

    .prose :global(img) {
        @apply my-0 rounded-md border border-amber-100/10 drop-shadow-md;
    }

    .prose :global(ul) {
        list-style-type: "- ";
        margin-top: -1.25em; /* reduce margin to 0 */
        @apply py-0;
    }

    .prose :global(ul) :global(li) {
        @apply my-0;
    }

    .prose :global(p:where(p + ul)) {
        @apply text-red-400;
    }

    .prose :global(a) {
        @apply decoration-brand-border underline underline-offset-1;
    }
</style>
