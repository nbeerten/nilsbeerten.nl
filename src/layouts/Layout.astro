---
import { ViewTransitions } from "astro:transitions";
import Navigation from "@components/Navigation.astro";
import "src/styles/colors.css";

interface Props {
    title: string;
    description?: string;
    article?:
        | false
        | {
              published_time: Date;
          };
    class?: string;
    back?: string;
    lang: "en" | "nl";
    noindex?: boolean;
}

const {
    title,
    description = "Personal website of Nils Beerten, aka nbeerten, nbert.",
    article = false,
    class: className,
    back = "/",
    lang,
    noindex = false,
} = Astro.props;
---

<!doctype html>
<html lang={lang}>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />

        <link rel="icon" href="/favicon.ico" sizes="any" />
        <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />

        {noindex && <meta name="robots" content="noindex" />}

        <link rel="sitemap" href="/sitemap-index.xml" />
        <meta name="generator" content={Astro.generator} />

        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="theme-color" content="#0c0a09" media="(prefers-color-scheme: dark)" />
        <meta name="theme-color" content="#fefdfb" media="(prefers-color-scheme: light)" />

        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:type" content={article ? "article" : "website"} />
        {
            article && (
                <>
                    <meta
                        property="article:published_time"
                        content={article.published_time.toISOString()}
                    />
                    <meta property="article:author" content="Nils Beerten" />
                </>
            )
        }
        <meta property="og:url" content={Astro.url} />

        <meta property="twitter:domain" content={Astro.url.host} />
        <meta property="twitter:url" content="https://nilsbeerten.nl" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />

        <link
            rel="preload"
            href="/fonts/Satoshi-Variable.woff2"
            as="font"
            type="font/woff2"
            crossorigin="anonymous"
            transition:persist
        />
        <link
            rel="preload"
            href="/fonts/Inter-Variable.woff2"
            as="font"
            type="font/woff2"
            crossorigin="anonymous"
            transition:persist
        />

        <script>
            declare global {
                interface Window {
                    setColorScheme: (scheme: "light" | "dark" | "auto") => void;
                }
            }

            const localStorage = window.localStorage;

            function getStoredColorScheme(): "light" | "dark" | "auto" | null {
                return localStorage.getItem("color-scheme") as "light" | "dark" | "auto" | null;
            }

            function setStoredColorScheme(colorScheme: "light" | "dark" | "auto") {
                if (colorScheme === "auto") {
                    localStorage.removeItem("color-scheme");
                } else {
                    localStorage.setItem("color-scheme", colorScheme);
                }
            }

            function detectPrefersDarkScheme(): boolean {
                return window.matchMedia("(prefers-color-scheme: dark)").matches;
            }

            let previousTransitionTimeout: NodeJS.Timeout | number | null = null;
            function applyTransition(document: Document) {
                let transitionDuration = 0.3; // seconds

                if (previousTransitionTimeout) {
                    clearTimeout(previousTransitionTimeout);
                }

                document.documentElement.style.transition = `background-color ${transitionDuration}s ease-in-out, color ${transitionDuration}s ease-in-out, border-color ${transitionDuration}s ease-in-out`;

                previousTransitionTimeout = setTimeout(() => {
                    document.documentElement.style.transition = "";
                    previousTransitionTimeout = null;
                }, transitionDuration * 1000);
            }

            function applyColorScheme(document: Document) {
                const colorScheme = getStoredColorScheme();
                const prefersDarkScheme = colorScheme
                    ? colorScheme === "dark"
                    : detectPrefersDarkScheme();
                const hasColorSchemeClass =
                    document.documentElement.classList.contains("dark") ||
                    document.documentElement.classList.contains("light");

                if (hasColorSchemeClass) applyTransition(document);

                document.documentElement.classList.toggle("dark", prefersDarkScheme);
                document.documentElement.classList.toggle("light", !prefersDarkScheme);
            }

            function setColorScheme(colorScheme: "light" | "dark" | "auto") {
                setStoredColorScheme(colorScheme);
                applyColorScheme(document);
            }

            function initializeColorSchemeToggler(document: Document) {
                const colorSchemeToggle = document.querySelector("#themeToggle") as HTMLDivElement;
                const currentColorScheme = getStoredColorScheme() || "auto";
                const colorSchemeInput = colorSchemeToggle.querySelector(
                    `input[value="${currentColorScheme}"]`
                ) as HTMLInputElement;

                if (colorSchemeInput) colorSchemeInput.checked = true;

                colorSchemeToggle.addEventListener("change", (event) => {
                    const selectedColorScheme = (event.target as HTMLInputElement).value;
                    applyTransitionToLabels(document);

                    if (
                        selectedColorScheme === "light" ||
                        selectedColorScheme === "dark" ||
                        selectedColorScheme === "auto"
                    ) {
                        setColorScheme(selectedColorScheme);
                    } else {
                        setColorScheme("auto");
                    }
                });
            }

            let previousLabelTransitionTimeout: NodeJS.Timeout | number | null = null;

            function applyTransitionToLabels(document: Document) {
                let transitionDuration = 0.3; // seconds

                if (previousLabelTransitionTimeout) {
                    clearTimeout(previousLabelTransitionTimeout);
                }

                document.querySelectorAll("#themeToggle > label").forEach((label) => {
                    (label as HTMLLabelElement).style.transition = `all ${transitionDuration}s ease-in-out`;
                });

                previousLabelTransitionTimeout = setTimeout(() => {
                    document.querySelectorAll("#themeToggle > label").forEach((label) => {
                        (label as HTMLLabelElement).style.transition = "";
                    });
                    previousLabelTransitionTimeout = null;
                }, transitionDuration * 1000);
            }

            window.setColorScheme = setColorScheme;

            applyColorScheme(document);
            initializeColorSchemeToggler(document);

            window
                .matchMedia("(prefers-color-scheme: dark)")
                .addEventListener("change", () => applyColorScheme(document));

            document.addEventListener("astro:before-swap", (event) => {
                applyColorScheme(event.newDocument);
                // initializeColorSchemeToggler(document);
            });

            document.addEventListener("astro:after-swap", () => {
                initializeColorSchemeToggler(document);
            });
        </script>

        <style>
            :root {
                background-color: theme(colors.brand.background);
                color: theme(colors.brand.text);
                color-scheme: light dark;
                scrollbar-gutter: stable both-edges;

                font-feature-settings: "cv05", "cv07", "cv11", "ss01";
            }
        </style>

        <style is:inline>
            @font-face {
                font-family: "Satoshi";
                src: url(/fonts/Satoshi-Variable.woff2) format("woff2");
                font-weight: 300 900;
                font-display: swap;
                font-style: normal;
            }

            @font-face {
                font-family: "Satoshi";
                src: url(/fonts/Satoshi-VariableItalic.woff2) format("woff2");
                font-weight: 300 900;
                font-display: swap;
                font-style: italic;
            }

            @font-face {
                font-family: "Inter";
                src: url(/fonts/Inter-Variable.woff2) format("woff2");
                font-weight: 100 900;
                font-display: swap;
                font-style: normal;
            }

            @font-face {
                font-family: "Inter";
                src: url(/fonts/Inter-VariableItalic.woff2) format("woff2");
                font-weight: 100 900;
                font-display: swap;
                font-style: italic;
            }
        </style>

        {/* Fix prettier formatting; without this the <style> gets moved to inside the <body> */}
        <ViewTransitions />
    </head>
    <body class={`flex justify-center px-10 py-10 ${className}`}>
        <div class="w-full max-w-2xl">
            <Navigation class="mb-5" {back} />
            <main>
                <slot />
            </main>
        </div>
    </body>
</html>
